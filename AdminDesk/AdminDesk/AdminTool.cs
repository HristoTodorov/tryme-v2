// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin_tool.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Admindesk {

  /// <summary>Holder for reflection information generated from admin_tool.proto</summary>
  public static partial class AdminToolReflection {

    #region Descriptor
    /// <summary>File descriptor for admin_tool.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AdminToolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBhZG1pbl90b29sLnByb3RvEglhZG1pbmRlc2siFwoJSWRSZXF1ZXN0EgoK",
            "AmlkGAEgASgJIigKDFNpbXBsZU9iamVjdBIKCgJpZBgBIAEoCRIMCgRuYW1l",
            "GAIgASgJIjoKDVN1YmplY3RzUmVwbHkSKQoIc3ViamVjdHMYASADKAsyFy5h",
            "ZG1pbmRlc2suU2ltcGxlT2JqZWN0IjgKDENsYXNzZXNSZXBseRIoCgdjbGFz",
            "c2VzGAEgAygLMhcuYWRtaW5kZXNrLlNpbXBsZU9iamVjdCI5Cg5UZXN0TmFt",
            "ZXNSZXBseRInCgZ0aGVtZXMYASADKAsyFy5hZG1pbmRlc2suU2ltcGxlT2Jq",
            "ZWN0IioKBkFuc3dlchIMCgR0ZXh0GAEgASgJEhIKCmlzX2NvcnJlY3QYAiAB",
            "KAgiSAoIUXVlc3Rpb24SCgoCaWQYASABKAkSDAoEdGV4dBgCIAEoCRIiCgdh",
            "bnN3ZXJzGAMgAygLMhEuYWRtaW5kZXNrLkFuc3dlciJNCglUZXN0UmVwbHkS",
            "CgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRImCglxdWVzdGlvbnMYAyADKAsy",
            "Ey5hZG1pbmRlc2suUXVlc3Rpb24yhwIKCUFkbWluRGVzaxI/CgtHZXRTdWJq",
            "ZWN0cxIULmFkbWluZGVzay5JZFJlcXVlc3QaGC5hZG1pbmRlc2suU3ViamVj",
            "dHNSZXBseSIAEj0KCkdldENsYXNzZXMSFC5hZG1pbmRlc2suSWRSZXF1ZXN0",
            "GhcuYWRtaW5kZXNrLkNsYXNzZXNSZXBseSIAEkEKDEdldFRlc3ROYW1lcxIU",
            "LmFkbWluZGVzay5JZFJlcXVlc3QaGS5hZG1pbmRlc2suVGVzdE5hbWVzUmVw",
            "bHkiABI3CgdHZXRUZXN0EhQuYWRtaW5kZXNrLklkUmVxdWVzdBoULmFkbWlu",
            "ZGVzay5UZXN0UmVwbHkiAEIqChFpby5ncnBjLmFkbWluZGVza0IOQWRtaW5E",
            "ZXNrUHJvdG9QAaICAkFEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Admindesk.IdRequest), global::Admindesk.IdRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Admindesk.SimpleObject), global::Admindesk.SimpleObject.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Admindesk.SubjectsReply), global::Admindesk.SubjectsReply.Parser, new[]{ "Subjects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Admindesk.ClassesReply), global::Admindesk.ClassesReply.Parser, new[]{ "Classes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Admindesk.TestNamesReply), global::Admindesk.TestNamesReply.Parser, new[]{ "Themes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Admindesk.Answer), global::Admindesk.Answer.Parser, new[]{ "Text", "IsCorrect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Admindesk.Question), global::Admindesk.Question.Parser, new[]{ "Id", "Text", "Answers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Admindesk.TestReply), global::Admindesk.TestReply.Parser, new[]{ "Id", "Name", "Questions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  The request message containing or not the id.
  /// </summary>
  public sealed partial class IdRequest : pb::IMessage<IdRequest> {
    private static readonly pb::MessageParser<IdRequest> _parser = new pb::MessageParser<IdRequest>(() => new IdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Admindesk.AdminToolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdRequest(IdRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdRequest Clone() {
      return new IdRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  this is not necessary to be filled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Has id and name.
  /// </summary>
  public sealed partial class SimpleObject : pb::IMessage<SimpleObject> {
    private static readonly pb::MessageParser<SimpleObject> _parser = new pb::MessageParser<SimpleObject>(() => new SimpleObject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Admindesk.AdminToolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleObject(SimpleObject other) : this() {
      id_ = other.id_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleObject Clone() {
      return new SimpleObject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleObject other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response containing the subjects.
  /// </summary>
  public sealed partial class SubjectsReply : pb::IMessage<SubjectsReply> {
    private static readonly pb::MessageParser<SubjectsReply> _parser = new pb::MessageParser<SubjectsReply>(() => new SubjectsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubjectsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Admindesk.AdminToolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectsReply(SubjectsReply other) : this() {
      subjects_ = other.subjects_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectsReply Clone() {
      return new SubjectsReply(this);
    }

    /// <summary>Field number for the "subjects" field.</summary>
    public const int SubjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Admindesk.SimpleObject> _repeated_subjects_codec
        = pb::FieldCodec.ForMessage(10, global::Admindesk.SimpleObject.Parser);
    private readonly pbc::RepeatedField<global::Admindesk.SimpleObject> subjects_ = new pbc::RepeatedField<global::Admindesk.SimpleObject>();
    /// <summary>
    ///  id -> 01, 02, 03, ...
    ///  name -> Math, History, ...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Admindesk.SimpleObject> Subjects {
      get { return subjects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubjectsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubjectsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subjects_.Equals(other.subjects_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subjects_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      subjects_.WriteTo(output, _repeated_subjects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subjects_.CalculateSize(_repeated_subjects_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubjectsReply other) {
      if (other == null) {
        return;
      }
      subjects_.Add(other.subjects_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            subjects_.AddEntriesFrom(input, _repeated_subjects_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response containing the classes.
  /// </summary>
  public sealed partial class ClassesReply : pb::IMessage<ClassesReply> {
    private static readonly pb::MessageParser<ClassesReply> _parser = new pb::MessageParser<ClassesReply>(() => new ClassesReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassesReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Admindesk.AdminToolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassesReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassesReply(ClassesReply other) : this() {
      classes_ = other.classes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassesReply Clone() {
      return new ClassesReply(this);
    }

    /// <summary>Field number for the "classes" field.</summary>
    public const int ClassesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Admindesk.SimpleObject> _repeated_classes_codec
        = pb::FieldCodec.ForMessage(10, global::Admindesk.SimpleObject.Parser);
    private readonly pbc::RepeatedField<global::Admindesk.SimpleObject> classes_ = new pbc::RepeatedField<global::Admindesk.SimpleObject>();
    /// <summary>
    ///  id -> 01, 02, 03, ..., 12
    ///  name -> 1 grade, 2 grade, ...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Admindesk.SimpleObject> Classes {
      get { return classes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassesReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassesReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!classes_.Equals(other.classes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= classes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      classes_.WriteTo(output, _repeated_classes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += classes_.CalculateSize(_repeated_classes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassesReply other) {
      if (other == null) {
        return;
      }
      classes_.Add(other.classes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            classes_.AddEntriesFrom(input, _repeated_classes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response containing the names of tests.
  /// </summary>
  public sealed partial class TestNamesReply : pb::IMessage<TestNamesReply> {
    private static readonly pb::MessageParser<TestNamesReply> _parser = new pb::MessageParser<TestNamesReply>(() => new TestNamesReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestNamesReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Admindesk.AdminToolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestNamesReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestNamesReply(TestNamesReply other) : this() {
      themes_ = other.themes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestNamesReply Clone() {
      return new TestNamesReply(this);
    }

    /// <summary>Field number for the "themes" field.</summary>
    public const int ThemesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Admindesk.SimpleObject> _repeated_themes_codec
        = pb::FieldCodec.ForMessage(10, global::Admindesk.SimpleObject.Parser);
    private readonly pbc::RepeatedField<global::Admindesk.SimpleObject> themes_ = new pbc::RepeatedField<global::Admindesk.SimpleObject>();
    /// <summary>
    ///  id -> 01, 02, 03, ...
    ///  name -> Some theme's name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Admindesk.SimpleObject> Themes {
      get { return themes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestNamesReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestNamesReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!themes_.Equals(other.themes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= themes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      themes_.WriteTo(output, _repeated_themes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += themes_.CalculateSize(_repeated_themes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestNamesReply other) {
      if (other == null) {
        return;
      }
      themes_.Add(other.themes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            themes_.AddEntriesFrom(input, _repeated_themes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Has text and is_correct.
  /// </summary>
  public sealed partial class Answer : pb::IMessage<Answer> {
    private static readonly pb::MessageParser<Answer> _parser = new pb::MessageParser<Answer>(() => new Answer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Answer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Admindesk.AdminToolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer(Answer other) : this() {
      text_ = other.text_;
      isCorrect_ = other.isCorrect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer Clone() {
      return new Answer(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_correct" field.</summary>
    public const int IsCorrectFieldNumber = 2;
    private bool isCorrect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCorrect {
      get { return isCorrect_; }
      set {
        isCorrect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Answer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Answer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (IsCorrect != other.IsCorrect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (IsCorrect != false) hash ^= IsCorrect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (IsCorrect != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsCorrect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (IsCorrect != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Answer other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.IsCorrect != false) {
        IsCorrect = other.IsCorrect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 16: {
            IsCorrect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Has id, text and answers.
  /// </summary>
  public sealed partial class Question : pb::IMessage<Question> {
    private static readonly pb::MessageParser<Question> _parser = new pb::MessageParser<Question>(() => new Question());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Question> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Admindesk.AdminToolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Question() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Question(Question other) : this() {
      id_ = other.id_;
      text_ = other.text_;
      answers_ = other.answers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Question Clone() {
      return new Question(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "answers" field.</summary>
    public const int AnswersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Admindesk.Answer> _repeated_answers_codec
        = pb::FieldCodec.ForMessage(26, global::Admindesk.Answer.Parser);
    private readonly pbc::RepeatedField<global::Admindesk.Answer> answers_ = new pbc::RepeatedField<global::Admindesk.Answer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Admindesk.Answer> Answers {
      get { return answers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Question);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Question other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Text != other.Text) return false;
      if(!answers_.Equals(other.answers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      hash ^= answers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      answers_.WriteTo(output, _repeated_answers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      size += answers_.CalculateSize(_repeated_answers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Question other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      answers_.Add(other.answers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
          case 26: {
            answers_.AddEntriesFrom(input, _repeated_answers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response containing the questions.
  /// </summary>
  public sealed partial class TestReply : pb::IMessage<TestReply> {
    private static readonly pb::MessageParser<TestReply> _parser = new pb::MessageParser<TestReply>(() => new TestReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Admindesk.AdminToolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReply(TestReply other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      questions_ = other.questions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestReply Clone() {
      return new TestReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "questions" field.</summary>
    public const int QuestionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Admindesk.Question> _repeated_questions_codec
        = pb::FieldCodec.ForMessage(26, global::Admindesk.Question.Parser);
    private readonly pbc::RepeatedField<global::Admindesk.Question> questions_ = new pbc::RepeatedField<global::Admindesk.Question>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Admindesk.Question> Questions {
      get { return questions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!questions_.Equals(other.questions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= questions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      questions_.WriteTo(output, _repeated_questions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += questions_.CalculateSize(_repeated_questions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestReply other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      questions_.Add(other.questions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            questions_.AddEntriesFrom(input, _repeated_questions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
